name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  pr-quality-check:
    name: PR Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: timezone-service/package-lock.json
        
    - name: Install dependencies
      run: |
        cd timezone-service
        npm ci
        
    - name: Run full quality check
      run: |
        cd timezone-service
        echo "🔍 Running type check..."
        npm run type-check
        
        echo "✨ Checking code formatting..."
        npm run format:check
        
        echo "🔍 Running linter..."
        npm run lint
        
        echo "🧪 Running all tests..."
        npm run test:coverage
        
        echo "🏗️  Building application..."
        npm run build
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Quality Check Results')
          );
          
          const body = `## 🤖 Quality Check Results
          
          ✅ **All quality checks passed!**
          
          - 🔍 **Type Check**: Passed
          - ✨ **Code Formatting**: Passed  
          - 🔍 **Linting**: Passed
          - 🧪 **Tests**: Passed
          - 🏗️ **Build**: Passed
          
          Your PR is ready for review! 🎉`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: timezone-service/package-lock.json
        
    - name: Install dependencies
      run: |
        cd timezone-service
        npm ci
        
    - name: Build and analyze bundle size
      run: |
        cd timezone-service
        npm run build
        
        echo "📦 Analyzing bundle size..."
        du -sh dist/
        find dist/ -name "*.js" -exec wc -c {} + | sort -n
        
        echo "📊 Bundle analysis complete!"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: timezone-service/package-lock.json
        
    - name: Install dependencies
      run: |
        cd timezone-service
        npm ci
        
    - name: Run security audit
      run: |
        cd timezone-service
        npm audit --audit-level moderate
        
    - name: Check for outdated packages
      run: |
        cd timezone-service
        npm outdated || true
